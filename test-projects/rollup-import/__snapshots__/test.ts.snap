// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rollup build: outputs 1`] = `
Object {
  "cjs": Array [
    Object {
      "code": "'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n[\\"default\\"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);

/**
 * This module is only for testing
 */
const MESSAGE = \\"This module is only for testing\\";
function hello(name = \\"world\\") {
  return \\"Hello \\".concat(name, \\"!\\");
}
function testPathDelimiter() {
  return path__namespace.delimiter;
}

var testMod = /*#__PURE__*/Object.freeze({
  __proto__: null,
  MESSAGE: MESSAGE,
  hello: hello,
  testPathDelimiter: testPathDelimiter
});

exports.testMod = testMod;
",
      "fileName": "index.js",
      "name": "index",
      "type": "chunk",
    },
  ],
  "esm": Array [
    Object {
      "code": "import * as path from 'path';

/**
 * This module is only for testing
 */
const MESSAGE = \\"This module is only for testing\\";
function hello(name = \\"world\\") {
  return \\"Hello \\".concat(name, \\"!\\");
}
function testPathDelimiter() {
  return path.delimiter;
}

var testMod = /*#__PURE__*/Object.freeze({
  __proto__: null,
  MESSAGE: MESSAGE,
  hello: hello,
  testPathDelimiter: testPathDelimiter
});

export { testMod };
",
      "fileName": "index.js",
      "name": "index",
      "type": "chunk",
    },
  ],
}
`;

exports[`rollup build: watchFiles 1`] = `
Array [
  "index.mjs",
  "../../dist/es/util/test-mod.js",
]
`;
